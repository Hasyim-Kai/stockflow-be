// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Section =========================================================================
// 1 Outlet can have many User (1 to many)

enum Role {
  ADMIN
  OUTLET_OWNER
  EMPLOYEE
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  email     String   @unique
  password  String   @db.VarChar(100)
  role      Role
  createdAt DateTime @default(now())

  // one to one with outlet
  outlet   Outlet @relation(fields: [outletId], references: [id])
  outletId Int
  // one to many with transaction
  // transactions Transaction[]
}

model Outlet {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(100)
  address String

  // one to one with user
  user User[]
}

// Product Section =========================================================================

enum QuantityUnit {
  Pcs
  Liter
  MiliLiter
  Box
  Cup
  Bottle
}

model Product {
  id           Int          @id @default(autoincrement())
  productCode  String       @unique
  name         String
  price        Float
  quantity     Float
  quantityUnit QuantityUnit
  description  String
  isSealOpened Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt

  // many to many with transaction through 'TransactionProduct'
  // transactionProducts TransactionProduct[]
}

// model Transaction {
//   id         Int      @id @default(autoincrement())
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   totalPrice Float
//   quantity   Int

//   // one to many with user
//   userId              Int
//   user                User                 @relation(fields: [userId], references: [id])
//   // many to many with transaction through 'TransactionProduct'
//   transactionProducts TransactionProduct[]
//   // one to one with Transaction
//   invoice             Invoice?
// }

// model TransactionProduct {
//   id Int @id @default(autoincrement())

//   // Foreign key relationships
//   transactionId Int
//   transaction   Transaction @relation(fields: [transactionId], references: [id])
//   productId     Int
//   product       Product     @relation(fields: [productId], references: [id])

//   // Unique constraint to prevent duplicate entries per transaction-product combination
//   @@unique([transactionId, productId])
// }

// model Invoice {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   paid      Boolean  @default(false)

//   // one to one with Transaction
//   transaction   Transaction @relation(fields: [transactionId], references: [id])
//   transactionId Int         @unique // relation scalar field (used in the `@relation` attribute above)
// }
